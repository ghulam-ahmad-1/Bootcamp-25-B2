

### üß≠ Section 1: Terminal Basics & File Management

1. **Navigate to your home directory, then list all hidden files. Which ones are commonly used for configuration?**

   * *Hint: Use `cd`, `ls -a`.* 
Solution cd ~ ( go to home )
ls -a (show all hidden files ) 
2. **Create a directory named `projects`, then create a file called `README.md` inside it with the text ‚ÄúMy Projects‚Äù.**

   * *Use `mkdir`, `echo`, `>`.*
Solution 
mkdir projects 
echo "My projects"> projects/README.md

3. **Change the permissions of a file `script.sh` to make it executable only by the owner.**

   * *Use `chmod` with numeric mode.*
Solution 
chmod 700 script.sh (where 7 gives read+ write+ execute permission to the owner where as 0 for no permisiion for group , and other 0  mean 0 permisiion for others 

4. **Copy all `.txt` files from the current directory into a folder named `backup`. If it doesn‚Äôt exist, create it.**

   * *Use `mkdir -p`, `cp` with globbing.*
solution 
mkdir -p backup && cp *.txt backup/

5. **Write a one-liner that finds all `.log` files under the `/var/log` directory and outputs their filenames and sizes.**

   * *Use `find`, `du`, `-exec`, or `xargs`.*
Solution 
find /var/log -type f -name "*.log" -exec du -h {} +
---

### üîç Section 2: Text Processing & Command Composition

6. **Write a command that counts the number of times the word ‚Äúerror‚Äù appears in a file called `server.log`.**

   * *Use `grep` and `wc`.*
solution 
grep -o "error" server.log | wc -l

7. **Print the third column from a CSV file named `data.csv`, assuming it‚Äôs comma-delimited.**

   * *Use `cut` or `awk`.*
soluion 
cut -d "," -f3 data.csv

8. **Write a pipeline that shows the 10 most used commands from your Bash history.**

   * *Use `history`, `awk`, `sort`, `uniq`.*
solution  
history | awk '{CMD[$2]++} END {for (c in CMD) print CMD[c], c}' | sort -nr |head -n 10

9. **Tail a growing log file (`/var/log/syslog`) but also highlight lines that contain the word ‚Äúfailed‚Äù.**

   * *Use `tail -f` and `grep --color`.*
solution 
tail -f /var/log/syslog | grep --color=always -i "failed"

10. **Replace all occurrences of the word "foo" with "bar" in all `.txt` files in the current directory.**

    * *Use `sed` in-place editing with globbing.*
solution 
sed -i 's/foo/bar/g' *.txt
---

### üß† Section 3: Bash Scripting Foundations

11. **Write a script that accepts a filename as an argument and prints how many lines it contains.**

    ```bash
    #!/bin/bash
    # Your logic here
    ```
solution this command will use in below given quetions(till 20) flag: 1.touch scrip.sh (creating .sh file) 2. notepad script.sh (open the sh file as notepad editor) 
3. paste the specific function commands 4 . chmod +x script.sh (make the .sh executable ) 5. .\script.sh (run the file)
paste this commands in .sh file 
#!/bin/bash

# Check if a filename was provided
if [ -z "$1" ]; then
  echo "Usage: $0 filename"
  exit 1
fi

# Count and print the number of lines in the file
if [ -f "$1" ]; then
  lines=$(wc -l < "$1")
  echo "The file '$1' has $lines lines."
else
  echo "File '$1' not found."
fi

12. **Create a script that checks if a directory exists; if not, it creates it and echoes ‚ÄúCreated!‚Äù.**
solution 
paste these commands in .sh file
#!/bin/bash

# Directory name (you can change this or pass it as an argument)
DIR="my_folder"

# Check if the directory exists
if [ ! -d "$DIR" ]; then
  mkdir "$DIR"
  echo "Created!"
else
  echo "Directory '$DIR' already exists."
fi

13. **Write a script that takes two numbers from user input and prints their sum.**

    * *Use `read`, `expr`, or arithmetic expansion.*
solution 
paste this .sh 
#!/bin/bash

# Prompt the user for input
read -p "Enter the first number: " num1
read -p "Enter the second number: " num2

# Calculate the sum
sum=$((num1 + num2))

# Display the result
echo "The sum of $num1 and $num2 is: $sum"

14. **Modify a script so it logs all output (both stdout and stderr) into a log file named `run.log`.**

    * *Use redirection: `>`, `2>&1`.*
solution 
paste this in .sh file 
#!/bin/bash

# Redirect all output (stdout and stderr) to run.log
exec > run.log 2>&1

# Your script logic below
echo "This is standard output"
ls nonexistentfile  # This will generate an error (stderr)

15. **Write a script that loops over a list of filenames and prints their line count.**
solution 
paste this .sh file 
#!/bin/bash

# List of files (you can modify this list or pass filenames as arguments)
files=("file1.txt" "file2.txt" "file3.txt")

# Loop through each file
for file in "${files[@]}"; do
  if [ -f "$file" ]; then
    lines=$(wc -l < "$file")
    echo "$file has $lines lines."
  else
    echo "$file not found."
  fi
done
---

### üåÄ Section 4: Conditionals, Loops, and Parameters

16. **Write a script that accepts one argument (a filename). If the file exists and is writable, append ‚ÄúHello‚Äù to it. Otherwise, print an error.**
solution 
paste this in .sh file 
#!/bin/bash

# Check if a filename was provided
if [ -z "$1" ]; then
  echo "Usage: $0 filename"
  exit 1
fi

# Check if the file exists and is writable
if [ -f "$1" ] && [ -w "$1" ]; then
  echo "Hello" >> "$1"
  echo "Appended 'Hello' to $1"
else
  echo "Error: File does not exist or is not writable."
fi

17. **Create a `for` loop in a script that prints numbers 1 through 10, but skips 5.**
solution 
paste this in .sh file 
#!/bin/bash

for i in {1..10}; do
  if [ "$i" -eq 5 ]; then
    continue  # Skip number 5
  fi
  echo "$i"
done

18. **Using a `while` loop, create a countdown from 10 to 0, printing one number per second.**
solution 
paste this in .sh file 
#!/bin/bash

count=10
while [ $count -ge 0 ]; do
  echo "$count"
  sleep 1
  ((count--))
done

19. **Write a script that loops through all `.sh` files in a directory and checks whether each one is executable.**
solution 
paste this in .sh file 
#!/bin/bash

for file in *.sh; do
  if [ -f "$file" ]; then
    if [ -x "$file" ]; then
      echo "$file is executable."
    else
      echo "$file is NOT executable."
    fi
  fi
done

20. **Write a function inside a script that returns the square of a given number. Call the function with input 4.**
solution 
paste this in .sh file 
#!/bin/bash

# Define the function
square() {
  local num=$1
  echo $((num * num))
}

# Call the function with input 4
result=$(square 4)
echo "The square of 4 is: $result"
---

### üß∞ Section 5: System and Process Management

21. **Find and kill all running processes named `node`.**

    * *Use `ps`, `grep`, `awk`, `kill`.*
solution 
ps aux | grep '[n]ode' |  xargs kill 
#- ps aux: Lists all running processes.
#- grep '[n]ode': Matches the word node while avoiding matching the grep command itself.
#- xargs kill: Sends the kill command to each PID.

22. **Write a one-liner to check disk usage and alert if it exceeds 90%.**

    * *Use `df`, `awk`, `if`.*
solution 
$ [ $(df -h | awk 'NR>1 {gsub(/%/,""); if ($5+0 > 90) print $0}' | wc -l) -gt 0 ] && echo "‚ö†Ô∏è Disk usage exceeds 90%!" || echo "‚úÖ Disk usage is under control."
‚úÖ Disk usage is under control.

23. **Create a script that backs up a directory (e.g., `~/projects`) to `~/backup` with a timestamp.**

24. **Write a cron expression that runs a script every weekday at 7:30 AM.**

    * *Use `crontab -e`.*
solution open crontab 
crontab -e
30 7 * * 1-5 C:/Users/wastech/Documents/pf/script.sh
#30 7 : runs at 7.30 am 
# ** : everyday of the month , every month 
#1-5 : monday to friday (1=monday , 5= friday)

25. **Monitor CPU and memory usage for the top 5 processes every 5 seconds.**

    * *Use `watch`, `top`, or `ps`.*

---

### üåê Section 6: Environment & Advanced Use

26. **Temporarily change the value of the `PATH` variable in your terminal session to include a folder `~/scripts`.**

    * *Use `export`.*

27. **Explain what `.bashrc` and `.bash_profile` do, and make a small change that aliases `ll` to `ls -alF`.**

28. **Write a script that downloads a file from a given URL and checks if the download was successful.**

    * *Use `curl` or `wget`, test exit codes.*

29. **What‚Äôs the difference between running `source script.sh` and `./script.sh`? When would you use each?**
./script.sh --> when execute it runs in the subshell and any change made in the running of this file is temporary . The change will not be implemented in the main file .
source script --> it runs in the current shell and any change made while running this file also be changed in the main file like it is a permanent change .